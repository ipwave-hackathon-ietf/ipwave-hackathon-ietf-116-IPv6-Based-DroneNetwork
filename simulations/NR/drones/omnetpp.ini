[General]
#scheduler-class = "inet::cRealTimeScheduler" #so that speed appears realistic
#debug-on-errors = true
#tkenv-plugin-path = ../../../etc/plugins
#tkenv-default-run=1


image-path=../../../images
output-scalar-file-append = false
**.routingRecorder.enabled = false

############### Statistics ##################
output-scalar-file = ${resultdir}/${configname}/${repetition}.sca
output-vector-file = ${resultdir}/${configname}/${repetition}.vec
seed-set = ${repetition}
**.vector-recording = false
sim-time-limit = 10day

#sim-time-limit = 3000s
## scene visualization
#**.visualizer.osgVisualizer.typename = "IntegratedOsgVisualizer"
#**.visualizer.osgVisualizer.sceneVisualizer.clearColor = "skyblue"
#**.visualizer.osgVisualizer.sceneVisualizer.sceneImage = "showcases/desert"
#**.visualizer.osgVisualizer.sceneVisualizer.sceneImageSize = 5000m
#**.visualizer.osgVisualizer.sceneVisualizer.axisLength = 1000m
#**.visualizer.osgVisualizer.sceneVisualizer.sceneMinX = -2000m
#**.visualizer.osgVisualizer.sceneVisualizer.sceneMinY = -2000m
#**.visualizer.osgVisualizer.sceneVisualizer.sceneMinZ = 0m
#**.visualizer.osgVisualizer.sceneVisualizer.sceneMaxX = 3000m
#**.visualizer.osgVisualizer.sceneVisualizer.sceneMaxY = 3000m
#**.visualizer.osgVisualizer.sceneVisualizer.sceneMaxZ = 1000m
#
## network node visualization: disable labels
#**.visualizer.osgVisualizer.networkNodeVisualizer.displayModuleName = true
#
### mobility visualization
#**.visualizer.*.mobilityVisualizer.displayMobility = true # master switch
#**.visualizer.*.mobilityVisualizer.displayPositions = true
#**.visualizer.*.mobilityVisualizer.displayOrientations = true
#**.visualizer.*.mobilityVisualizer.displayVelocities = true
#**.visualizer.*.mobilityVisualizer.displayMovementTrails = true
#**.visualizer.*.mobilityVisualizer.animationSpeed = 1

## mobility constraint area
**.constraintAreaMinX = 0m
**.constraintAreaMinY = 0m
**.constraintAreaMinZ = 0m
**.constraintAreaMaxX = 500m
**.constraintAreaMaxY = 500m
**.constraintAreaMaxZ = 100m
**.updateInterval = 0.1s # test with 0s too, and let getCurrentPosition update the display string from a test module

**.mobility.constraintAreaMaxX = 1000m
**.mobility.constraintAreaMaxY = 1000m
**.mobility.constraintAreaMinX = 0m
**.mobility.constraintAreaMinY = 0m
**.mobility.constraintAreaMinZ = 0m
**.mobility.constraintAreaMaxZ = 0m
**.mobility.initFromDisplayString = false

##########################################################
#            Simulation parameters                       #
##########################################################
debug-on-errors = false
print-undisposed = false

#sim-time-limit = 100s

**.sctp.**.scalar-recording = false
**.sctp.**.vector-recording = false
**.routingRecorder.enabled = false

*.playgroundSizeX = 20000m
*.playgroundSizeY = 20000m
*.playgroundSizeZ = 50m

###########################################################
#            DroneScenario                                #
###########################################################

# Number of Resource Blocks
**.numBands = 25 

# Transmission Power
**.ueTxPower = 26
**.eNodeBTxPower = 46

# Enable dynamic association of UEs (based on best SINR)
*.drone[*].cellularNic.nrPhy.dynamicCellAssociation = true
*.drone[*].masterId = 0     # ignored if dynamic association is disabled
*.drone[*].macCellId = 0    # ignored if dynamic association is disabled
*.drone[*].nrMasterId = 1     # ignored if dynamic association is disabled
*.drone[*].nrMacCellId = 1    # ignored if dynamic association is disabled

# eNodeB configuration
**.gNodeB1.macCellId = 1
**.gNodeB1.macNodeId = 1
**.gNodeB2.macCellId = 2
**.gNodeB2.macNodeId = 2 

[Config MassMobility]
network = ParcelDeliveryNetwork
*.numdrones = 5
**.drone*.mobility.typename = "MassMobility"
**.drone*.mobility.initFromDisplayString = false
**.drone*.mobility.changeInterval = truncnormal(2s, 0.5s)
**.drone*.mobility.angleDelta = normal(0deg, 30deg)
**.drone*.mobility.speed = truncnormal(15mps, 5mps)


[Config EPD]                     #Efficient Parcel Delivery Service Bien Aime Configuration#
network = ParcelDeliveryNetwork
*.numdrones = 20
**.drone*.mobility.typename = "DroneNetMob2"
**.drone[*].mobility.ndst = 8
**.drone[*].mobility.nd = 8
**.drone[*].mobility.initFromDisplayString = false
**.drone[*].mobility.changeInterval = truncnormal(2s, 0.5s)
**.drone[*].mobility.angleDelta = normal(0deg, 30deg)
**.drone[*].mobility.speed = truncnormal(15mps, 5mps)
**.drone[*].mobility.remainingBattery = 480
**.drone[*].mobility.weightCapacity = 25
**.drone[*].mobility.parcelSelecitionMethod = 4
**.drone[*].mobility.initialX = 300m
**.drone[*].mobility.initialY = 200m
**.drone[*].mobility.initialZ = 0m


[Config DNM]                     #Bien Aime Configuration#
network = ParcelDeliveryNetwork
*.numdrones = 6
**.drone*.mobility.typename = "DroneMobility"
**.drone[*].mobility.ndst = 5
**.drone[*].mobility.initFromDisplayString = false
**.drone[*].mobility.changeInterval = truncnormal(2s, 0.5s)
**.drone[*].mobility.angleDelta = normal(0deg, 30deg)
**.drone[*].mobility.speed = truncnormal(15mps, 5mps)
**.drone[*].mobility.initialX = 300m
**.drone[*].mobility.initialY = 20m
**.drone[*].mobility.initialZ = 0m

[Config CANA]    #Context Aware Navigation Algorithm CANA by Bien Aime#
network = CANANetwork
*.nbst = 4
*.numdrones = 10
**.dst*.mobility.typename = "StatNodeMob"
**.dst[0].mobility.initialX = 200m
**.dst[0].mobility.initialY =  100m
**.dst[0].mobility.initialZ = 0m
**.dst[1].mobility.initialX = 100m
**.dst[1].mobility.initialY = 250m
**.dst[1].mobility.initialZ = 0m
**.dst[2].mobility.initialX = 160m
**.dst[2].mobility.initialY = 220m
**.dst[2].mobility.initialZ = 0m
**.dst[3].mobility.initialX = 200m
**.dst[3].mobility.initialY = 330m
**.dst[3].mobility.initialZ = 0m
**.dst[4].mobility.initialX = 400m
**.dst[4].mobility.initialY = 300m
**.dst[4].mobility.initialZ = 0m
**.dst[5].mobility.initialX = 400m
**.dst[5].mobility.initialY = 200m
**.dst[5].mobility.initialZ = 0m
**.dst[*].mobility.initFromDisplayString = false
**.bstion*.mobility.typename = "StatNodeMob"
**.bstion[0].mobility.initialX = 200m
**.bstion[0].mobility.initialY = 20m
**.bstion[0].mobility.initialZ = 0m
**.bstion[1].mobility.initialX = 20m
**.bstion[1].mobility.initialY = 200m
**.bstion[1].mobility.initialZ = 0m
**.bstion[2].mobility.initialX = 480m
**.bstion[2].mobility.initialY = 190m
**.bstion[2].mobility.initialZ = 0m
**.bstion[3].mobility.initialX = 200m
**.bstion[3].mobility.initialY = 380m
**.bstion[3].mobility.initialZ = 0m
**.bstion[*].mobility.initFromDisplayString = false
**.drone*.mobility.typename = "DroneNetMob2"
**.drone*.mobility.ndst = 30
**.drone*.mobility.initFromDisplayString = false
**.drone*.mobility.changeInterval = truncnormal(2s, 0.5s)
*.drone[*].mobility.angleDelta = normal(0deg, 30deg)
**.drone*.mobility.speed = 5mps
**.drone[*].mobility.initFromDisplayString = false


[Config NRCANA]    #Context Aware Navigation Algorithm CANA -5G-Based communication by Bien Aime#
network = NRCANANetwork
##########################################################
#          Mobile network specific parameters            #
##########################################################
#
## Number of Resource Blocks
#**.numBands = 25 
#
## Transmission Power
#**.ueTxPower = 26
#**.eNodeBTxPower = 46
#
## Enable dynamic association of UEs (based on best SINR)
#*.drone[*].cellularNic.nrPhy.dynamicCellAssociation = true
#*.drone[*].masterId = 0     # ignored if dynamic association is disabled
#*.drone[*].macCellId = 0    # ignored if dynamic association is disabled
#*.drone[*].nrMasterId = 1     # ignored if dynamic association is disabled
#*.drone[*].nrMacCellId = 1    # ignored if dynamic association is disabled
#
## eNodeB configuration
#**.gNodeB1.macCellId = 1
#**.gNodeB1.macNodeId = 1
#**.gNodeB2.macCellId = 2
#**.gNodeB2.macNodeId = 2 

# Enable handover
*.drone[*].cellularNic.nrPhy.enableHandover = true
*.gNodeB*.cellularNic.phy.enableHandover = true
*.gNodeB*.cellularNic.phy.handoverLatency = 50ms
*.gNodeB*.cellInfo.broadcastMessageInterval = 1s # eNB will sends broadcast triggers every second

# X2 and SCTP configuration
*.gNodeB*.numX2Apps = 1    # one x2App per peering eNodeB
*.gNodeB*.x2App[*].server.localPort = 5000 + ancestorIndex(1) # Server ports (x2App[0]=5000, x2App[1]=5001, ...)
*.gNodeB1.x2App[0].client.connectAddress = "gNodeB2%x2ppp0" 
*.gNodeB2.x2App[0].client.connectAddress = "gNodeB1%x2ppp0" 
**.sctp.nagleEnabled = false         # if true, transmission of small packets will be delayed on the X2
**.sctp.enableHeartbeats = false


*.nbst = 4
*.numdrones = 10
**.dst*.mobility.typename = "StatNodeMob"
**.dst[0].mobility.initialX = 200m
**.dst[0].mobility.initialY =  100m
**.dst[0].mobility.initialZ = 0m
**.dst[1].mobility.initialX = 100m
**.dst[1].mobility.initialY = 250m
**.dst[1].mobility.initialZ = 0m
**.dst[2].mobility.initialX = 160m
**.dst[2].mobility.initialY = 220m
**.dst[2].mobility.initialZ = 0m
**.dst[3].mobility.initialX = 200m
**.dst[3].mobility.initialY = 330m
**.dst[3].mobility.initialZ = 0m
**.dst[4].mobility.initialX = 400m
**.dst[4].mobility.initialY = 300m
**.dst[4].mobility.initialZ = 0m
**.dst[5].mobility.initialX = 400m
**.dst[5].mobility.initialY = 200m
**.dst[5].mobility.initialZ = 0m
**.dst[*].mobility.initFromDisplayString = false
**.bstion*.mobility.typename = "StatNodeMob"
**.bstion[0].mobility.initialX = 200m
**.bstion[0].mobility.initialY = 20m
**.bstion[0].mobility.initialZ = 0m
**.bstion[1].mobility.initialX = 20m
**.bstion[1].mobility.initialY = 200m
**.bstion[1].mobility.initialZ = 0m
**.bstion[2].mobility.initialX = 480m
**.bstion[2].mobility.initialY = 190m
**.bstion[2].mobility.initialZ = 0m
**.bstion[3].mobility.initialX = 200m
**.bstion[3].mobility.initialY = 380m
**.bstion[3].mobility.initialZ = 0m

**.drone*.mobility.typename = "DroneNetMob2"
**.drone*.mobility.ndst = 30
**.drone*.mobility.initFromDisplayString = false
**.drone*.mobility.changeInterval = truncnormal(2s, 0.5s)
*.drone[*].mobility.angleDelta = normal(0deg, 30deg)
**.drone*.mobility.speed = 5mps
**.drone[*].mobility.initFromDisplayString = false

**.drone[*0].mobility.initialX = 300m
**.drone[*0].mobility.initialY = 20m
**.drone[*0].mobility.initialZ = 80m
**.drone[*1].mobility.initialX = 300m
**.drone[*1].mobility.initialY = 20m
**.drone[*1].mobility.initialZ = 80m
**.drone[*2].mobility.initialX = 300m
**.drone[*2].mobility.initialY = 20m
**.drone[*2].mobility.initialZ = 80m
**.drone[*3].mobility.initialX = 20m
**.drone[*3].mobility.initialY = 200m
**.drone[*3].mobility.initialZ = 80m
**.drone[*4].mobility.initialX = 20m
**.drone[*4].mobility.initialY = 200m
**.drone[*4].mobility.initialZ = 80m
**.drone[*5].mobility.initialX = 480m
**.drone[*5].mobility.initialY = 190m
**.drone[*5].mobility.initialZ = 80m
**.drone[*6].mobility.initialX = 480m
**.drone[*6].mobility.initialY = 190m
**.drone[*6].mobility.initialZ = 80m
**.drone[*7].mobility.initialX = 300m
**.drone[*7].mobility.initialY = 380m
**.drone[*7].mobility.initialZ = 80m
**.drone[*8].mobility.initialX = 300m
**.drone[*8].mobility.initialY = 380m
**.drone[*8].mobility.initialZ = 80m
**.drone[*9].mobility.initialX = 300m
**.drone[*9].mobility.initialY = 380m
**.drone[*9].mobility.initialZ = 80m
**.drone[*10].mobility.initialX = 100m
**.drone[*10].mobility.initialY = 20m
**.drone[*10].mobility.initialZ = 20m
**.bstion[*].mobility.initFromDisplayString = false



