[General]
image-path=../../../images
output-scalar-file-append = false
sim-time-limit=10day
**.routingRecorder.enabled = false

############### Statistics ##################
output-scalar-file = ${resultdir}/${configname}/${repetition}.sca
output-vector-file = ${resultdir}/${configname}/${repetition}.vec
seed-set = ${repetition}
**.vector-recording = false


############### IPv4 configurator config #################
*.configurator.config = xmldoc("./demo1.xml")

################ Mobility parameters #####################
# *

**.mobility.constraintAreaMaxX = 1000m
**.mobility.constraintAreaMaxY = 1000m
**.mobility.constraintAreaMaxZ = 500m
**.mobility.constraintAreaMinX = 0m
**.mobility.constraintAreaMinY = 0m
**.mobility.constraintAreaMinZ = 0m
**.mobility.initFromDisplayString = false

############### Number of Resource Blocks ################
**.numBands = 50 # this value should be kept equal to the number of RBs

############### Transmission Power ##################
**.ueTxPower = 26
**.eNodeBTxPower = 40
**.targetBler = 0.01
**.blerShift = 5  

#------------------------------------#
# Config Standalone
#
# Topology configuration for the exemplary scenario for NR Standalone deployment
#
[Config Standalone]
network = simu5g.simulations.NR.drones.DroneSingleCell

############### e/gNodeB configuration #################
*.gnb.mobility.initialX = 450m
*.gnb.mobility.initialY = 300m

############## UE configuration ##################
*.numdrones = 9

# connect the UE's NIC to the corresponding serving eNB
*.drone[*].macCellId = 1
*.drone[*].masterId = 1
*.drone[*].nrMacCellId = 1
*.drone[*].nrMasterId = 1

# UE position
*.drone[*].mobility.initialX = 450m
*.drone[*].mobility.initialY = 350m
#------------------------------------#



#------------------------------------#
# Config VoIP-DL
#
# General configuration for Voice-over-IP DL traffic to the UE
# 
[Config VoIP-DL]
extends=Standalone

# one UDP application for each user
*.drone[*].numApps = 1

# the amount of UDP applications on server should be equal to (numUEs)*(ue[*].numApps) 
*.server.numApps = 1

#============= Application Setup =============
*.drone[*].app[*].typename = "VoIPReceiver"
*.drone[*].app[0].localPort = 3000

*.server.app[*].PacketSize = 40
*.server.app[*].destAddress = "ue[0]" # obtain the address of the client by reading its index in the array of udp Apps
*.server.app[*].localPort = 3088+ancestorIndex(0) 
*.server.app[*].typename = "VoIPSender"
*.server.app[*].startTime = uniform(0s,0.02s)
#------------------------------------#



#------------------------------------#
# Config VoIP-UL
#
# General configuration for Voice-over-IP UL traffic from the UE
# 
[Config VoIP-UL]
extends=Standalone

# one UDP application for each user
*.drone[*].numApps = 1

# the amount of UDP applications on server should be equal to (numUEs)*(ue[*].numApps) 
*.server.numApps = 1

#============= Application Setup =============
*.server.app[*].typename = "VoIPReceiver"
*.server.app[*].localPort = 3000+ancestorIndex(0)

*.drone[*].app[*].PacketSize = 40
# obtain the address of the client by reading its index in the array of udp Apps
*.drone[*].app[*].destAddress = "server" 
*.drone[*].app[*].localPort = 3088+ancestorIndex(0)
*.drone[*].app[*].typename = "VoIPSender"
*.drone[*].app[*].startTime = uniform(0s,0.02s)
#------------------------------------#

[Config NRCANA] # Context Aware Navigation Algorithm CANA -5G-Based communication by Bien Aime#
extends=Standalone  
*.nbst = 4
*.numdrones = 10
**.dst*.mobility.typename = "StatNodeMob"
**.dst[0].mobility.initialX = 200m
**.dst[0].mobility.initialY =  100m
**.dst[0].mobility.initialZ = 0m
**.dst[1].mobility.initialX = 100m
**.dst[1].mobility.initialY = 250m
**.dst[1].mobility.initialZ = 0m
**.dst[2].mobility.initialX = 160m
**.dst[2].mobility.initialY = 220m
**.dst[2].mobility.initialZ = 0m
**.dst[3].mobility.initialX = 200m
**.dst[3].mobility.initialY = 330m
**.dst[3].mobility.initialZ = 0m
**.dst[4].mobility.initialX = 400m
**.dst[4].mobility.initialY = 300m
**.dst[4].mobility.initialZ = 0m
**.dst[5].mobility.initialX = 400m
**.dst[5].mobility.initialY = 200m
**.dst[5].mobility.initialZ = 0m
**.dst[*].mobility.initFromDisplayString = false
**.bstion*.mobility.typename = "StatNodeMob"
**.bstion[0].mobility.initialX = 200m
**.bstion[0].mobility.initialY = 20m
**.bstion[0].mobility.initialZ = 0m
**.bstion[1].mobility.initialX = 20m
**.bstion[1].mobility.initialY = 200m
**.bstion[1].mobility.initialZ = 0m
**.bstion[2].mobility.initialX = 480m
**.bstion[2].mobility.initialY = 190m
**.bstion[2].mobility.initialZ = 0m
**.bstion[3].mobility.initialX = 200m
**.bstion[3].mobility.initialY = 380m
**.bstion[3].mobility.initialZ = 0m

**.drone*.mobility.typename = "DroneNetMob2"
**.drone*.mobility.ndst = 30
**.drone*.mobility.initFromDisplayString = false
**.drone*.mobility.changeInterval = truncnormal(2s, 0.5s)
*.drone[*].mobility.angleDelta = normal(0deg, 30deg)
**.drone*.mobility.speed = 5mps
**.drone[*].mobility.initFromDisplayString = false

**.drone[*0].mobility.initialX = 300m
**.drone[*0].mobility.initialY = 20m
**.drone[*0].mobility.initialZ = 80m
**.drone[*1].mobility.initialX = 300m
**.drone[*1].mobility.initialY = 20m
**.drone[*1].mobility.initialZ = 80m
**.drone[*2].mobility.initialX = 300m
**.drone[*2].mobility.initialY = 20m
**.drone[*2].mobility.initialZ = 80m
**.drone[*3].mobility.initialX = 20m
**.drone[*3].mobility.initialY = 200m
**.drone[*3].mobility.initialZ = 80m
**.drone[*4].mobility.initialX = 20m
**.drone[*4].mobility.initialY = 200m
**.drone[*4].mobility.initialZ = 80m
**.drone[*5].mobility.initialX = 480m
**.drone[*5].mobility.initialY = 190m
**.drone[*5].mobility.initialZ = 80m
**.drone[*6].mobility.initialX = 480m
**.drone[*6].mobility.initialY = 190m
**.drone[*6].mobility.initialZ = 80m
**.drone[*7].mobility.initialX = 300m
**.drone[*7].mobility.initialY = 380m
**.drone[*7].mobility.initialZ = 80m
**.drone[*8].mobility.initialX = 300m
**.drone[*8].mobility.initialY = 380m
**.drone[*8].mobility.initialZ = 80m
**.drone[*9].mobility.initialX = 300m
**.drone[*9].mobility.initialY = 380m
**.drone[*9].mobility.initialZ = 80m
**.drone[*10].mobility.initialX = 100m
**.drone[*10].mobility.initialY = 20m
**.drone[*10].mobility.initialZ = 20m
**.bstion[*].mobility.initFromDisplayString = false

